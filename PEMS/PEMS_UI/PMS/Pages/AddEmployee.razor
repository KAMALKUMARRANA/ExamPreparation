@page "/add-employee"
@using PEMS_UI.Models.DTOs
@using PEMS_UI.Models;
@using PEMS_UI.Services;
@using static PEMS_UI.Components.Warning;

@if (ShowWarning)
{
    <Warning OnClickCallback="DismissWarning" Type=@Warning_Type Message="@Warning_Message" />
}
else
{
    <Card>
        <div class="row user-detail-row">
            <h3>Add New Employee</h3>
            <div class="form-group">
                <EditForm Model="@addEmployeeForm" OnValidSubmit="AddNewEmployee">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <p>
                        <div class="form-floating mb-3">
                            <InputText class="form-control" id="floatingInput" placeholder="Name here" @bind-Value="addEmployeeForm.Name" />
                            <label for="floatingInput">Name</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputNumber class="form-control" id="floatingInput" placeholder="Salary here" @bind-Value="addEmployeeForm.Salary" />
                            <label for="floatingInput">Salary</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputSelect shadow rounded id="floatingInput" placeholder="Employee here" @bind-Value="addEmployeeForm.Type" class="form-select">
                                @foreach (EmployeeType type in Enum.GetValues(typeof(EmployeeType)))
                                {
                                    <option value="@type">@type</option>
                                }
                            </InputSelect>
                            <label for="floatingInput">Employment Type</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputSelect shadow rounded id="floatingInput" placeholder="Position here" @bind-Value="addEmployeeForm.Position" class="form-select">
                                @foreach (Position position in Enum.GetValues(typeof(Position)))
                                {
                                    <option value="@position">@position.GetDisplayName()</option>
                                }
                            </InputSelect>
                            <label for="floatingInput">Position</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputRadioGroup @bind-Value="addEmployeeForm.Gender">
                                <InputRadio Value="1"/>Male
                                <InputRadio Value="2"/>Female
                                <InputRadio Value="3" />Others


                            </InputRadioGroup>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText class="form-control" id="floatingInput" placeholder="Image here" @bind-Value="addEmployeeForm.ImgUrl" />
                            <label for="floatingInput">Image Url</label>
                        </div>
                 
                        <div class="form-floating mb-3">
                            <InputTextArea class="form-control" id="floatingInput" placeholder="Description" @bind-Value="addEmployeeForm.Description"></InputTextArea>
                            <label for="floatingInput">Description</label>
                        </div>
                    </p>
                    <button class="btn btn-outline-primary" type="submit">Submit</button>
                </EditForm>
            </div>
        </div>
    </Card>
}


@code {
    [Inject] private IEmployeeService EmployeeService { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    private bool ShowWarning = false;
    private string Warning_Message = "";
    private WarningType Warning_Type;

    private AddEmployeeForm addEmployeeForm = new();

    private async Task AddNewEmployee()
    {
        var response = await EmployeeService.AddEmployee(addEmployeeForm);
        Warning_Type = response.StatusCode == 200 ? WarningType.Success : WarningType.Error;
        Warning_Message = response.Message;
        ShowWarning = true;
    }

    private void DismissWarning()
    {
        ShowWarning = false;
        NavigationManager.NavigateTo($"/");
    }
}